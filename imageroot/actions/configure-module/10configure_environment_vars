#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import agent
import os
from agent.ldapproxy import Ldapproxy

# Try to parse the stdin as JSON.
# If parsing fails, output everything to stderr
data = json.load(sys.stdin)

# Get LDAP domain
ldap_domain = data.get("ldap_domain", "")

# Set LDAP domain

agent.set_env("LDAP_DOMAIN",ldap_domain)

# unset LDAP

agent.unset_env("LDAP_HOSTNAME")
agent.unset_env("LDAP_PORT")
agent.unset_env("LDAP_SEARCH_BIND_DN")
agent.unset_env("LDAP_SEARCH_BIND_PASSWORD")
agent.unset_env("LDAP_USER_BASE_DN")
agent.unset_env("LDAP_MEMBER_ATTRIBUTE")
agent.unset_env("LDAP_MEMBER_ATTRIBUTE_TYPE")
agent.unset_env("LDAP_GROUP_BASE_DN")
agent.unset_env("LDAP_USERNAME_ATTRIBUTE")
agent.unset_env("LDAP_USER_SEARCH_FILTER")
agent.unset_env("LDAP_GROUP_SEARCH_FILTER")

# Check if an LDAP domain is set:

if ldap_domain:
    agent.bind_user_domains([ldap_domain])

    # Get LDAP properties
    odom = Ldapproxy().get_domain(ldap_domain)
    base_dn = odom['base_dn']

    agent.set_env("LDAP_HOSTNAME","10.0.2.2")
    agent.set_env("LDAP_PORT",odom['port'])
    agent.set_env("LDAP_SEARCH_BIND_DN",odom['bind_dn'])
    agent.set_env("LDAP_SEARCH_BIND_PASSWORD",odom['bind_password'])

    if odom['schema'] == "rfc2307":
        # OpenLDAP specific:
        agent.set_env("LDAP_USER_BASE_DN","ou=People,"+base_dn)
        agent.set_env("LDAP_MEMBER_ATTRIBUTE","memberUid")
        agent.set_env("LDAP_MEMBER_ATTRIBUTE_TYPE","uid")
        agent.set_env("LDAP_GROUP_BASE_DN","ou=Groups,"+odom['base_dn'])

    if odom['schema'] == "ad":
        # Samba AD specific:
        agent.set_env("LDAP_USER_BASE_DN","cn=Users,"+base_dn)
        agent.set_env("LDAP_GROUP_BASE_DN","cn=Users,"+odom['base_dn'])
        agent.set_env("LDAP_USERNAME_ATTRIBUTE","samaccountname")
        agent.set_env("LDAP_USER_SEARCH_FILTER","(&(objectClass=top)(objectClass=user)(objectClass=person)(objectClass=organizationalPerson))")
        agent.set_env("LDAP_GROUP_SEARCH_FILTER","(&(objectClass=top)(objectClass=group))")
else:
    agent.bind_user_domains([])

#This is specific to you module, so you need to change it accordingly.
# we read a json stdin {"vars1":true, "var2":"foo", "vars3": 3} and we writ it to .config/state/environment
# Upper case to set environment variable and minor case to read from stdin

# this values must exists in the json stdin
# agent.set_env("MAIL_SERVER", data["mail_server"])
# agent.set_env("LDAP_DOMAIN", data["ldap_domain"])

# you can add default values for the following variables
# agent.set_env("MAIL_DOMAIN",data.get("mail_domain",""))
# agent.set_env("WOWORKERSCOUNT",data.get("workers_count",3))
# agent.set_env("AUXILIARYACCOUNT",data.get("auxiliary_account",True))
# agent.set_env("ACTIVESYNC",data.get("activesync",False))


# Make sure everything is saved inside the environment file
# just before starting systemd unit
agent.dump_env()
