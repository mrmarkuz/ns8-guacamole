#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import agent
import agent.tasks
import os
from agent.ldapproxy import Ldapproxy

# Try to parse the stdin as JSON.
# If parsing fails, output everything to stderr
data = json.load(sys.stdin)

# Setup default values
host = data.get("host")
h2hs = data.get("http2https", True)
le = data.get("lets_encrypt", False)

# Get LDAP domain
ldap_domain = data.get("ldap_domain", "")

# Talk with agent using file descriptor.
# Setup configuration from user input.
agent.set_env("TRAEFIK_HOST", host)
agent.set_env("TRAEFIK_HTTP2HTTPS", h2hs)
agent.set_env("TRAEFIK_LETS_ENCRYPT", le)
agent.set_env("LDAP_DOMAIN",ldap_domain)

# Set LDAP domain

agent.set_env("LDAP_DOMAIN", ldap_domain)
if ldap_domain:
    agent.bind_user_domains([ldap_domain])


# Get LDAP properties
udomname = os.environ.get('LDAP_DOMAIN','')

odom = Ldapproxy().get_domain(udomname)

agent.set_env("LDAP_USER_BASE",odom['base_dn'])
agent.set_env("LDAP_HOSTNAME",odom['host'])
agent.set_env("LDAP_PORT",odom['port'])
agent.set_env("LDAP_SEARCH_BIND_DN",odom['bind_dn'])
agent.set_env("LDAP_SEARCH_BIND_PASSWORD",odom['bind_password'])

# OpenLDAP specific:
#agent.set_env("LDAP_MEMBER_ATTRIBUTE","memberUID")
#agent.set_env("LDAP_MEMBER_ATTRIBUTE_TYPE","uid")
#agent.set_env("LDAP_GROUP_BASE_DN=ou=Groups,dc=mrmarkuz,dc=com","ou=Groups,"+odom['base_dn'])

#print('GUACAMOLE_LDAP_PORT=' + str(odom['port']), file=denv)
#    print('GUACAMOLE_LDAP_USER=' + odom['bind_dn'], file=denv)
#    print('GUACAMOLE_LDAP_HOST=' + odom['host'], file=denv)
#    print('GUACAMOLE_LDAP_PASS=' + odom['bind_password'], file=denv)
#    print('GUACAMOLE_LDAP_SCHEMA=' + odom['schema'], file=denv)
#    print('GUACAMOLE_LDAP_BASE=' + odom['base_dn'], file=denv)


# Make sure everything is saved inside the environment file
# just before starting systemd unit
agent.dump_env()

# Find default traefik instance for current node
default_traefik_id = agent.resolve_agent_id('traefik@node')
if default_traefik_id is None:
    sys.exit(2)

response = agent.tasks.run(
    agent_id=agent.resolve_agent_id('traefik@node'),
    action='set-route',
    data={
        'instance': os.environ['MODULE_ID'],
        'url':  'http://127.0.0.1:' + os.environ["TCP_PORT"],
        'host': host,
        'http2https': h2hs,
        'lets_encrypt': le
    },
)

# Check if traefik configuration has been successfull
agent.assert_exp(response['exit_code'] == 0)
